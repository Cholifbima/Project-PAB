package com.example.pabproject.ui.screens

import android.graphics.Bitmap
import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.Download
import androidx.compose.material.icons.filled.QrCode
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.pabproject.LocalHistoryManager
import com.example.pabproject.ui.components.*
import com.example.pabproject.ui.theme.AbrilFatface
import com.example.pabproject.ui.theme.Nunito
import com.example.pabproject.ui.theme.PlayfairDisplay
import com.example.pabproject.utils.GalleryUtils
import com.example.pabproject.utils.QRCodeGenerator
import com.example.pabproject.viewmodel.MainViewModel
import com.example.pabproject.viewmodel.MainViewModelFactory
import androidx.lifecycle.SavedStateHandle
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun EmailToQRScreen(
    navController: NavController,
    viewModel: MainViewModel = viewModel(
        factory = MainViewModelFactory(SavedStateHandle())
    )
) {
    val emailAddress by viewModel.emailAddress.collectAsState()
    val emailSubject by viewModel.emailSubject.collectAsState()
    val emailBody by viewModel.emailBody.collectAsState()
    val isQrGenerated by viewModel.isQrGenerated.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    
    val scrollState = rememberScrollState()
    val context = LocalContext.current
    val historyManager = LocalHistoryManager.current
    val currentRoute = navController.currentDestination?.route
    
    // Show error message if any
    LaunchedEffect(errorMessage) {
        errorMessage?.let {
            Toast.makeText(context, it, Toast.LENGTH_SHORT).show()
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Email to QR Code",
                        fontFamily = PlayfairDisplay,
                        fontWeight = FontWeight.Bold,
                        fontSize = 18.sp,
                        color = MaterialTheme.colorScheme.primary
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(
                            Icons.AutoMirrored.Filled.ArrowBack, 
                            contentDescription = "Back",
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f)
                )
            )
        },
        bottomBar = {
            BottomNavigationBar(navController, currentRoute)
        },
        containerColor = MaterialTheme.colorScheme.background
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .verticalScroll(scrollState),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Text(
                text = "Generate Email QR Code",
                fontFamily = AbrilFatface,
                fontWeight = FontWeight.Normal,
                fontSize = 24.sp,
                letterSpacing = 0.25.sp,
                color = MaterialTheme.colorScheme.primary
            )
            
            FormContainer(title = "Email Details") {
                QRTextField(
                    value = emailAddress,
                    onValueChange = { 
                        viewModel.setEmailAddress(it)
                    },
                    placeholder = "Email Address",
                    keyboardType = KeyboardType.Email,
                    singleLine = true
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                QRTextField(
                    value = emailSubject,
                    onValueChange = { 
                        viewModel.setEmailSubject(it)
                    },
                    placeholder = "Subject (Optional)",
                    keyboardType = KeyboardType.Text,
                    singleLine = true
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                QRTextField(
                    value = emailBody,
                    onValueChange = { 
                        viewModel.setEmailBody(it)
                    },
                    placeholder = "Message (Optional)",
                    keyboardType = KeyboardType.Text,
                    singleLine = false,
                    minLines = 3,
                    maxLines = 6
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                QRActionButton(
                    text = "Generate QR Code",
                    icon = Icons.Default.QrCode,
                    onClick = {
                        viewModel.generateQrCode("EMAIL")
                        if (emailAddress.isNotBlank()) {
                            val emailContent = buildString {
                                append("mailto:$emailAddress")
                                if (emailSubject.isNotBlank()) append("?subject=${emailSubject}")
                                if (emailBody.isNotBlank()) append("${if (emailSubject.isBlank()) "?" else "&"}body=${emailBody}")
                            }
                            historyManager.addHistoryItem("Email QR", emailContent)
                        }
                    },
                    enabled = emailAddress.isNotBlank(),
                    modifier = Modifier.fillMaxWidth(),
                    isPrimary = true
                )
            }
            
            SuccessMessage(
                message = "QR Code generated and saved to history!",
                isVisible = isQrGenerated
            )
            
            if (emailAddress.isNotBlank() && isQrGenerated) {
                val emailContent = buildString {
                    append("mailto:$emailAddress")
                    if (emailSubject.isNotBlank()) append("?subject=${emailSubject}")
                    if (emailBody.isNotBlank()) append("${if (emailSubject.isBlank()) "?" else "&"}body=${emailBody}")
                }
                QRCodeDisplay(
                    text = emailContent,
                    modifier = Modifier.size(220.dp)
                )
            }
            
            Spacer(modifier = Modifier.height(40.dp))
        }
    }
} 