package com.example.pabproject.ui.screens

import android.widget.Toast
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.automirrored.filled.ArrowBack
import androidx.compose.material.icons.filled.QrCode
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.viewmodel.compose.viewModel
import androidx.navigation.NavController
import com.example.pabproject.LocalHistoryManager
import com.example.pabproject.ui.components.*
import com.example.pabproject.ui.theme.AbrilFatface
import com.example.pabproject.ui.theme.PlayfairDisplay
import com.example.pabproject.viewmodel.MainViewModel
import com.example.pabproject.viewmodel.MainViewModelFactory
import androidx.lifecycle.SavedStateHandle

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TwitterToQRScreen(
    navController: NavController,
    viewModel: MainViewModel = viewModel(
        factory = MainViewModelFactory(SavedStateHandle())
    )
) {
    val twitterUsername by viewModel.twitterUsername.collectAsState()
    val tweetText by viewModel.tweetText.collectAsState()
    val isQrGenerated by viewModel.isQrGenerated.collectAsState()
    val isSavedToHistory by viewModel.isSavedToHistory.collectAsState()
    val errorMessage by viewModel.errorMessage.collectAsState()
    val qrColor by viewModel.qrColor.collectAsState()
    val backgroundColor by viewModel.backgroundColor.collectAsState()
    
    val scrollState = rememberScrollState()
    val context = LocalContext.current
    val historyManager = LocalHistoryManager.current
    val currentRoute = navController.currentDestination?.route
    
    // Show error message if any
    LaunchedEffect(errorMessage) {
        errorMessage?.let {
            Toast.makeText(context, it, Toast.LENGTH_SHORT).show()
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Twitter to QR Code",
                        fontFamily = PlayfairDisplay,
                        fontWeight = FontWeight.Bold,
                        fontSize = 18.sp,
                        color = MaterialTheme.colorScheme.primary
                    ) 
                },
                navigationIcon = {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(
                            Icons.AutoMirrored.Filled.ArrowBack, 
                            contentDescription = "Back",
                            tint = MaterialTheme.colorScheme.primary
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.7f)
                )
            )
        },
        bottomBar = {
            BottomNavigationBar(navController, currentRoute)
        },
        containerColor = MaterialTheme.colorScheme.background
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(innerPadding)
                .padding(16.dp)
                .verticalScroll(scrollState),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(24.dp)
        ) {
            Text(
                text = "Generate Twitter QR Code",
                fontFamily = AbrilFatface,
                fontWeight = FontWeight.Normal,
                fontSize = 24.sp,
                letterSpacing = 0.25.sp,
                color = MaterialTheme.colorScheme.primary
            )
            
            FormContainer(title = "Twitter Details") {
                QRTextField(
                    value = twitterUsername,
                    onValueChange = { 
                        viewModel.setTwitterUsername(it.replace("@", ""))
                    },
                    placeholder = "Username (without @)",
                    keyboardType = KeyboardType.Text,
                    singleLine = true
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                QRTextField(
                    value = tweetText,
                    onValueChange = { 
                        viewModel.setTweetText(it)
                    },
                    placeholder = "Tweet Text (Optional)",
                    keyboardType = KeyboardType.Text,
                    singleLine = false,
                    minLines = 3,
                    maxLines = 6
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                QRActionButton(
                    text = "Generate QR Code",
                    icon = Icons.Default.QrCode,
                    onClick = {
                        viewModel.generateQrCode("TWITTER")
                    },
                    enabled = twitterUsername.isNotBlank(),
                    modifier = Modifier.fillMaxWidth(),
                    isPrimary = true
                )
            }
            
            // Advanced Color Picker
            AdvancedColorPicker(
                selectedColor = Color(qrColor),
                selectedBackgroundColor = Color(backgroundColor),
                customColorManager = viewModel.customColorManager,
                onColorSelected = { color ->
                    viewModel.setQrColor(color)
                },
                onBackgroundColorSelected = { color ->
                    viewModel.setBackgroundColor(color)
                },
                modifier = Modifier.fillMaxWidth()
            )
            
            SuccessMessage(
                message = "QR Code generated successfully!",
                isVisible = isQrGenerated
            )
            
            if (twitterUsername.isNotBlank() && isQrGenerated) {
                Column(
                    horizontalAlignment = Alignment.CenterHorizontally,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    val twitterContent = if (tweetText.isBlank()) {
                        "https://twitter.com/${twitterUsername}"
                    } else {
                        "https://twitter.com/intent/tweet?text=${tweetText}&via=${twitterUsername}"
                    }
                    
                    QRCodeDisplay(
                        text = twitterContent,
                        qrColor = Color(qrColor),
                        backgroundColor = Color(backgroundColor),
                        modifier = Modifier.size(220.dp)
                    )
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    QRActionButton(
                        text = if (isSavedToHistory) "Saved to History" else "Save to History",
                        icon = Icons.Default.QrCode,
                        onClick = {
                            if (!isSavedToHistory) {
                                historyManager.addHistoryItem(
                                    type = "Twitter QR", 
                                    content = twitterContent,
                                    qrColor = Color(qrColor),
                                    backgroundColor = Color(backgroundColor)
                                )
                                viewModel.setIsSavedToHistory(true)
                            }
                        },
                        enabled = !isSavedToHistory,
                        modifier = Modifier.fillMaxWidth(),
                        isPrimary = true
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(40.dp))
        }
    }
} 